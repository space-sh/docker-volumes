#
# Copyright 2017 Blockie AB
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
---
@clone: os file docker conf string

_info:
    title: Docker container management.

_dep_install:
    _info:
        title: Verify dependencies for this module.
        desc: |
            If docker is not already installed it will
            download and install the latest Docker Engine from Docker and
            add the targetuser to the docker group.
    _env:
        - targetuser: ${targetuser:-${SSHUSER:-$USER}}
        - RUN: DOCKER_VOLUMES_DEP_INSTALL -- "${targetuser}"

install:
    _info:
        title: Install the latest Docker Engine.
        desc: |
            Downloads and installs the latest Docker Engine from Docker.
            Also adds the targetuser to the docker group.
            Will reinstall if already installed.
    _env:
        - targetuser: ${targetuser:-${SSHUSER:-$USER}}
        - RUN: DOCKER_VOLUMES_INSTALL -- "${targetuser}"

_shebang:
    _info:
        title: Handle shebang invocations
        desc: |
            In a docker-volumes.conf file you could put
            #!/usr/bin/space -m docker-volumes /_shebang/
            as the first line to make the yaml file itself runnable.
            Remember to chmod +x it first.
    _env:
        - RUN: DOCKER_VOLUMES_SHEBANG

up:
    _info:
        title: Deploy volumes defined in conf file
        desc: |
            Read conf file to create all volumes
            defined and optionally populate with data.
            Warning: this could destroy volumes data!
    _env:
        - conffile:
        - RUN: DOCKER_VOLUMES_UP -- ${conffile-}

down:
    _info:
        title: Undeploy (destroy) volumes defined in conf file
        desc: |
            Warning: this will really destroy all volumes and their data!
    _env:
        - conffile:
        - RUN: DOCKER_VOLUMES_DOWN -- ${conffile-}

ps:
    _info:
        title: Check statuses for volumes defined in conf file
    _env:
        - conffile:
        - RUN: DOCKER_VOLUMES_PS -- ${conffile-}

create:
    _info:
        title: Create a volume
    _env:
        - name: ${name-}
        - driver: ${driver-}
        - opts: ${opts-}
        - labels: ${labels-}
        - RUN: DOCKER_VOLUMES_CREATE -- ${name-} ${driver-} ${opts-} ${labels-}

chmod:
    _info:
        title: Set the permissions and ownership of the mountpoint of a volume.
        desc: |
            This is done from within a container who will mount the volume.
    _env:
        - name: ${name-}
        - chmod: ${chmod-}
        - chown: ${chown-}
        - RUN: DOCKER_VOLUMES_CHMOD -- ${name-} ${chmod-} ${chown-}

inspect:
    _info:
        title: Check simple status of volume
    _env:
        - name: ${name-}
        - RUN: DOCKER_VOLUMES_INSPECT -- ${name-}

exists:
    _info:
        title: Check if a volume exists
    _env:
        - name: ${name-}
        - RUN: DOCKER_VOLUMES_EXISTS -- ${name-}

filelist:
    _info:
        title: List all files inside a volume
    _env:
        - RUN: DOCKER_VOLUMES_FILELIST

rm:
    _info:
        title: Remove a volume
    _env:
        - name: ${name-}
        - RUN: DOCKER_VOLUMES_RM -- ${name-}

ls:
    _info:
        title: List all volumes
    _env:
        - RUN: DOCKER_VOLUMES_LS

inspect:
    _info:
        title: Inspect a volume
    _env:
        - name: ${name-}
        - RUN: DOCKER_VOLUMES_INSPECT -- ${name-}

enter:
    _info:
        title: Enter into volume with a shell
    _env:
        - name: ${name-}
        - RUN: DOCKER_VOLUMES_ENTER -- ${name-}

empty:
    _info:
        title: Delete all files in a volume
    _env:
        - name: ${name-}
        - RUN: DOCKER_VOLUMES_EMPTY -- ${name-}

restore:
    _info:
        title: Restores a snapshot into a volume, possibly deletes all files first
        desc: |
            Archive, either path to tar.gz file,
            path to a directory to restore from
            or "-" for stdin.
    _env:
        - name: ${name-}
        - archive: ${archive-}
        - rmrf: ${rmrf-}
        - RUN: DOCKER_VOLUMES_RESTORE -- ${name-} ${archive-} ${rmrf-}

snapshot:
    _info:
        title: Take a snapshot of a volume
        desc: |
            Archive is either path to a tar.gz file,
            path to a directory to store snapshot in
            or "-" for stdout.
    _env:
        - name: ${name-}
        - archive: ${archive-}
        - RUN: DOCKER_VOLUMES_SNAPSHOT -- ${name-} ${archive-}
...
