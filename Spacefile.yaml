#
# Copyright 2017 Blockie AB
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
---
_clone:
    @clone: os file docker conf string
@include: |/_clone/

_info:
    title: Docker volumes management.

_dep_install:
    _info:
        title: Verify dependencies for this module.
        desc: |
            If docker is not already installed it will
            download and install the latest Docker Engine from Docker and
            add the targetuser to the docker group.
    _env:
        - targetuser: ${targetuser:-${SSHUSER:-$USER}}
        - RUN: DOCKER_VOLUMES_DEP_INSTALL -- "${targetuser}"

install:
    _info:
        title: Install the latest Docker Engine.
        desc: |
            Downloads and installs the latest Docker Engine from Docker.
            Also adds the targetuser to the docker group.
            Will reinstall if already installed.
    _env:
        - targetuser: ${targetuser:-${SSHUSER:-$USER}}
        - RUN: DOCKER_VOLUMES_INSTALL -- "${targetuser}"

_shebang:
    _info:
        title: Handle shebang invocations
        desc: |
            In a docker-volumes.conf file you could put
            #!/usr/bin/space -m docker-volumes /_shebang/
            as the first line to make the yaml file itself runnable.
            Remember to chmod +x it first.
    _env:
        - image:
        - flags:
        - container:
        - cmd:
        - RUN: DOCKER_VOLUMES_SHEBANG
batch:
    create:
        _info:
            title: Deploy volumes defined in conf file
            desc: |
                Read conf file to create all volumes
                defined and optionally populate with data.
                Warning: this could destroy volumes data!
        _env:
            - image:
            - flags:
            - container:
            - cmd:
            - name:
                title: Optional prefix to volume name(s)
            - conffile:
                title: The volumes conf file
                completion: G
            - SPACE_ARGS:
                arguments:
                    -
                        completion: G
            - RUN: DOCKER_VOLUMES_BATCH_CREATE -- "${conffile}" ${name-}

    rm:
        _info:
            title: Undeploy (destroy) volumes defined in conf file
            desc: |
                Warning: this will really destroy all volumes and their data!
        _env:
            - name:
                title: Optional prefix to volume name(s)
            - conffile:
                title: The volumes conf file
                completion: G
            - SPACE_ARGS:
                arguments:
                    -
                        completion: G
            - RUN: DOCKER_VOLUMES_BATCH_RM -- "${conffile}" ${name-}

    inspect:
        _info:
            title: Check statuses for volumes defined in conf file
        _env:
            - name:
                title: Optional prefix to volume name(s)
            - conffile:
                title: The volumes conf file
                completion: G
            - SPACE_ARGS:
                arguments:
                    -
                        completion: G
            - RUN: DOCKER_VOLUMES_BATCH_INSPECT -- "${conffile}" ${name-}

create:
    _info:
        title: Create a volume
    _env:
        - volume:
            title: Name of the volume
        - driver:
            title: Driver, optional.
            values:
                - local
        - opts:
            title: Options, optional
        - labels:
            title: Labels, optional
        - RUN: DOCKER_VOLUMES_CREATE -- "${volume}" ${driver-} ${opts-} ${labels-}

chmod:
    @prefix: @{PARENTPATH}
    @dotdot: prefix
    _info:
        title: Set the permissions and ownership of the mountpoint of a volume.
        desc: |
            This is done from within a container which will mount the volume.
    _env:
        - volume:
            title: Name of the volume
            completion: @{prefix}_list/
        - chmod:
            values:
                - permissions
        - chown:
            values:
                - owner
        - image:
        - flags:
        - container:
        - cmd:
        - SPACE_ARGS:
            arguments:
                -
                    completion: @{prefix}_list/
                -
                    values:
                        - permissions
                -
                    values:
                        - owner
        - RUN: DOCKER_VOLUMES_CHMOD -- "${volume}" ${chmod-} ${chown-}

inspect:
    @prefix: @{PARENTPATH}
    @dotdot: prefix
    _info:
        title: Check simple status of volume
    _env:
        - volume:
            title: Name of the volume
            completion: @{prefix}_list/
        - SPACE_ARGS:
            arguments:
                -
                    completion: @{prefix}_list/
        - RUN: DOCKER_VOLUMES_INSPECT -- "${volume}"

exists:
    @prefix: @{PARENTPATH}
    @dotdot: prefix
    _info:
        title: Check if a volume exists
    _env:
        - volume:
            title: Name of the volume
            completion: @{prefix}_list/
        - SPACE_ARGS:
            arguments:
                -
                    completion: @{prefix}_list/
        - RUN: DOCKER_VOLUMES_EXISTS -- "${volume}"

filelist:
    @prefix: @{PARENTPATH}
    @dotdot: prefix
    _info:
        title: List all files inside a volume
    _env:
        - volume:
            title: Name of the volume
            completion: @{prefix}_list/
        - image:
        - flags:
        - container:
        - cmd:
        - SPACE_ARGS:
            arguments:
                -
                    completion: @{prefix}_list/
        - RUN: DOCKER_VOLUMES_FILELIST -- "${volume}"

rm:
    @prefix: @{PARENTPATH}
    @dotdot: prefix
    _info:
        title: Remove a volume
    _env:
        - volume:
            title: Name of the volume
            completion: @{prefix}_list/
        - SPACE_ARGS:
            arguments:
                -
                    completion: @{prefix}_list/
        - RUN: DOCKER_VOLUMES_RM -- "${volume}"

ls:
    _info:
        title: List all volumes
    _env:
        - RUN: DOCKER_VOLUMES_LS

enter:
    @prefix: @{PARENTPATH}
    @dotdot: prefix
    _info:
        title: Enter into volume using a shell
    _env:
        - volume:
            title: Name of the volume
            completion: @{prefix}_list/
        - image:
        - flags:
        - container:
        - cmd:
        - SPACE_ARGS:
            arguments:
                -
                    completion: @{prefix}_list/
        - RUN: DOCKER_VOLUMES_ENTER -- "${volume}"

empty:
    @prefix: @{PARENTPATH}
    @dotdot: prefix
    _info:
        title: Delete all files in a volume
    _env:
        - volume:
            title: Name of the volume
            completion: @{prefix}_list/
        - image:
        - flags:
        - container:
        - cmd:
        - SPACE_ARGS:
            arguments:
                -
                    completion: @{prefix}_list/
        - RUN: DOCKER_VOLUMES_EMPTY -- "${volume}"

restore:
    @prefix: @{PARENTPATH}
    @dotdot: prefix
    _info:
        title: Restores a snapshot into a volume, possibly deletes all files first
        desc: |
            Archive, either path to tar.gz file,
            path to a directory to restore from
            or "-" for stdin.
    _env:
        - volume:
            title: Name of the volume
            completion: @{prefix}_list/
        - archive:
            title: tar.gz archive, directory or -
            completion: G
        - rmrf:
            title: set to 1 to empty the volume first.
            values:
                - 0
                - 1
        - image:
        - flags:
        - container:
        - cmd:
        - SPACE_ARGS:
            arguments:
                -
                    completion: @{prefix}_list/
                -
                    completion: G
                -
                    values:
                        - 0
                        - 1
        - RUN: DOCKER_VOLUMES_RESTORE -- "${volume}" "${archive}" ${rmrf-}

snapshot:
    @prefix: @{PARENTPATH}
    @dotdot: prefix
    _info:
        title: Take a snapshot of a volume
        desc: |
            Archive is either path to a tar.gz file,
            path to a directory to store snapshot in
            or "-" for stdout.
    _env:
        - volume:
            title: Name of the volume
            completion: @{prefix}_list/
        - archive:
            title: tar.gz archive, directory or -
            completion: G
        - image:
        - flags:
        - container:
        - cmd:
        - SPACE_ARGS:
            arguments:
                -
                    completion: @{prefix}_list/
                -
                    completion: G
        - RUN: DOCKER_VOLUMES_SNAPSHOT -- "${volume}" "${archive}"

_list:
    @include: docker-volumes|/ls/
    _env:
        - SPACE_ARGS: -q -|
        - SPACE_REDIR: "2>/dev/null"
        - SPACE_MUTE_EXIT: 1
        - SPACE_LOG_LEVEL: 0
...
